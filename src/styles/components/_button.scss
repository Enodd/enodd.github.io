@use '../utils/palette' as palette;
@use '../utils/utils' as utils;

$darkenLevel: 4;
$lightness: 4;
$padding: .4rem;
$borderSize: 2px;
$blurValue: 4px;
$transitionTime: 300ms;

@mixin createButtonClass($className, $color) {
    #{"&__#{$className}"} {
        @extend .button;
        color: $color;
        backdrop-filter: blur($blurValue);
        transition: $transitionTime background;
        &:not(:disabled):hover {
            background-color: #0001;
        }
        &:disabled {
            color: palette.getColor(disabled);
        }
        &--gradient {
            @extend .button;
            background: linear-gradient(135deg, darken($color, $darkenLevel), lighten($color, $lightness));
        }
        &--filled {
            @extend .button;
            background: $color;
            color: #fff;
            transition: $transitionTime background;
            &:not(:disabled):hover {
                background: darken($color, 5);
            }
            &:disabled {
                background: palette.getColor(disabled);
            }
        }
        &--outlined {
            @extend .button;
            border: $borderSize solid #fff4;
            padding: calc($padding - $borderSize);
            transition: $transitionTime;
            &:not(:disabled):hover {
                border-color: $color;
                color: $color;
            }
            &:disabled {
                border-color: palette.getColor(disabled);
                color: palette.getColor(disabled);
            }
        }
    }
}

.button {
    padding: $padding;
    cursor: pointer;
    border: none;
    border-radius: .4em;
    background: transparent;
    @include utils.fontSize('400');
    color: white;
    font-weight: bold;
    @include createButtonClass(primary, palette.getColor(primary));
    @include createButtonClass(secondary, palette.getColor(secondary));
    @include createButtonClass(trietary, palette.getColor(trietary));
}